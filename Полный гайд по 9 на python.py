'''
Часть заданий проще в питое сделать чем в excel.
Я почти всегда в питоне делаю, так тупо быстрее,
но некоторые операции (например количество в столбце) лучше через excel, он для этого предназначен лучше.

А так тут, как и в 17, конструктор получается.
'''

# 1 Открываем файл exel, кликаем в левый вехний угол (не ячейку), должна выделится вся таблица.
# Копируем её, вставляем в созданный файл и открываем его.
f = open('table_for_9.txt', 'r')

# 2 считываем все построчно
ls = [list(map(int, x.split())) for x in f]
'''
То же самое, что
ls = []
for x in f:
    raw = list(map(int, x.split()))
    Разделяем (по пробелам, оно так по умолчанию), 
    дальше с помощью map применяем на каждое число int(из строки в число)
    Ну и отшлифовать все list, что бы у нас было [1, 2, 3, 4], а не map_object(asdasfsdfxcv)
    
    ls.append(raw) Ну и закинуть
Но лучше генератором запомните (генератор это тот который [x for x in...]
'''

count = 0
for raw in ls:
    if raw:  # У нас могут быть разные условия, но это всё что меняется в программе
        count += 1
print(count)

# Теперь по условиям
raw = []

# максимальное число строки меньше суммы оставшихся чисел
m = max(raw)
if m < (sum(raw)-m):
    pass

# Четыре числа строки можно разбить на две пары чисел с равными суммами.
# Это значит что два каких-то числа равны половине суммы, но можно и просто все перебрать
s = sum(raw)
if (raw[0] + raw[1]) * 2 == s or (raw[0] + raw[2]) * 2 == s or (raw[0] + raw[3]) * 2 == s:
    pass

# в строке есть как четные, так и нечетные числа. (это кст сложное если что)
chet = [x for x in raw if x % 2 == 0]
n_chet = [x for x in raw if x % 2 != 0]
if len(chet) != 0 and len(n_chet) != 0:
    # Я докину сюда же
    # в строке четное количество четных чисел и нечетное количество нечетных чисел
    if len(chet) % 2 == 0 and len(n_chet) % 2 != 0:
        # И ещё одно
        # максимальное четное число в строке делится на 4.
        if max(chet) % 4 == 0:
            pass
# Логику я думаю вы поняли


# все числа различны
if len(raw) == len(set(raw)):
    # докину второе условие этой задачи, оно уже было, но это чуть сложнее
    # удвоенная сумма максимального и минимального чисел строки не превышает утроенной суммы оставшихся чисел.
    max_min_s = max(raw) + min(raw)
    ost_s = sum(raw) - max_min_s
    if (max_min_s * 2) <= (ost_s * 3):
        pass


# в строке есть два числа, которые повторяются дважды, остальные два числа различны;
povtori = [raw.count(x) for x in raw]
if povtori.count(2) == 4 and povtori.count(1) == 2:
    # максимальное число строки не повторяется;
    max_raw = max(raw)
    if raw.count(max_raw) == 1:
        # произведение максимального и минимального чисел строки больше суммы оставшихся четырёх чисел.
        min_raw = min(raw)
        if (max_raw * min_raw) > (sum(raw) - max_raw - min_raw):
            pass


# В строке есть только одно число, которое повторяется дважды, остальные два числа различны;
# все неповторяющиеся числа нечетны, повторяющиеся числа чётны. Поэтому просто разделим на дву группы
pov_dvazhdi = [x for x in raw if raw.count(x) == 2]
ne_povt = [x for x in raw if raw.count(x) == 1]
if len(pov_dvazhdi) == 2 and (len(ne_povt) + len(pov_dvazhdi)) == len(raw):
    if pov_dvazhdi[0] % 2 == 0:
        for i in ne_povt:
            if i % 2 == 0:
                break
        else:
            count += 1


# Определите количество строк таблицы, в которых содержится число,
# равное целой части среднего арифметического всех чисел в строке.
sr_ar = sum(raw)//len(raw)  # Ну или int(sum(raw)/len(raw)), нам в любом случае целое надо
if sr_ar in raw:
    pass

#  максимальное число строки повторяется столько же раз, сколько и минимальное.
if raw.count(min(raw)) == raw.count(max(raw)):
    pass


def is_triangle(a, b, c):  # Если вдруг встретиться про стороны треугольника
    return (a + b > c) and (a + c > b) and (b + c > a)  # Сумма 2 сторон всегда больше 3 ей


'''
Я думаю основную идею вы поняли, надо просто делать списки с числами, количеством повторов чисел и тд, а потом просто 
смотрим на их свойства
Основное это: max, min, len, count, sum, in
Обычно в этих заданиях нет ничего сложного
'''
